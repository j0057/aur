#!/bin/bash

set -o errexit -o nounset -o pipefail

function message_green  { echo -e "\e[1;36m==>\e[1;32m $1\e[0;0m" ; }
function message_red    { echo -e "\e[1;36m==>\e[1;31m $1\e[0;0m" ; }
function message_yellow { echo -e "\e[1;36m==>\e[1;33m $1\e[0;0m" ; }
function pkgbase {
    curl -s "https://aur.archlinux.org/rpc.php?type=info&arg=$1" \
        | jq -r '.results.PackageBase'
}
function git-ahead { git rev-list @{upstream}..HEAD --count ; }
function git-behind { git rev-list HEAD..@{upstream} --count ; }
function : { sudo -u ${BUILD_USER} $* ; }

. ${BUILD_AUR_CONF:-/etc/build-aur.conf}

export GOCACHE=$BUILD/.gocache

BUILD_USER=${BUILD_USER:-aur}

ARCH=$(uname -m)
NAME=$(basename $REPO)

# check permissions
if [ "$(id -u)" -ne "0" ]; then
    message_red "error: this script must run as root" 1>&2
    exit 1
fi

# allow build user to run pacman, for the duration of the script
cat >/etc/sudoers.d/build-aur-$$ <<EOF
${BUILD_USER} ALL=(ALL) NOPASSWD: /usr/bin/pacman
Defaults env_keep += "GOCACHE"
EOF
trap "rm /etc/sudoers.d/build-aur-$$" EXIT

# check for build directory
if [ ! -d "${BUILD}" ]; then
    message_red "[create] ${BUILD}"
    mkdir -pv "${BUILD}"
    chown "${BUILD_USER}" "${BUILD}"
    chmod 755 "${BUILD}"
fi

# check for repo directory
if [ ! -d "${REPO}" ]; then
    message_red "[create] ${REPO}"
    mkdir -pv "${REPO}"
    chown "${BUILD_USER}" "${REPO}"
    chmod 755 "${REPO}"
fi

# check for repo database file
if [ ! -f "${REPO}/${NAME}.db.tar.gz" ]; then
    message_red "[init] ${REPO}"
    : tar cvfT "${REPO}/${NAME}.db.tar.gz" /dev/null
    : ln -s "${NAME}.db.tar.gz" "${REPO}/${NAME}.db"
    pacman --sync --refresh
    pacman --sync --clean --noconfirm
fi

# get up to date pkgbuilds
cd ${BUILD}
for (( i=0 ; i < ${#PKGS[*]} ; i++ )); do
    name="${PKGS[i]}"

    # clone first time
    if [ ! -d "${name}" ]; then
        url="https://aur.archlinux.org/$(pkgbase $name).git/"
        message_yellow "[clone] ${name} from ${url}"
        : git clone --origin aur ${url} ${name}

        # review new repository
        cd "${name}"
        git ls-tree -rtz --name-only --full-name aur/master \
            | xargs -0i bash -c '
                echo -e "\e[1;35m#";
                echo -e "\e[1;35m# {}";
                echo -e "\e[1;35m#";
                echo;
                cat {};
                echo' \
            | less -R
        read -p "==> Code ok? [Y]es/[N]o " answer
        case "$answer" in
            y|Y) : git reset --hard aur/master ;;
            n|N) exit 0 ;;
            *)   exit 1 ;;
        esac
        cd ..
    fi

    # fetch new pkgbuild
    cd "${name}"
    : git fetch aur

    # review for pull-rebase
    if [ "$(git-behind)" -gt 0 ]; then
        # show new commits in remote
        git diff --color=always HEAD @{upstream}

        # prompt for permission
        message_red "[-$(git-behind)/+$(git-ahead)] ${name}"
        read -p "==> Pull-rebase? [Y]es/[N]o/[Q]uit " answer
        case "$answer" in
            y|Y) git pull --rebase ;;
            n|N) ;;
            q|Q) exit 0 ;;
            *)   exit 1 ;;
        esac
    fi

    # display status
    if [ "$(git-behind)" -eq 0 ]; then
        if [ "$(git-ahead)" -eq 0 ]; then
            message_green "[-$(git-behind)/+$(git-ahead)] ${name}"
        else
            message_yellow "[-$(git-behind)/+$(git-ahead)] ${name}"
        fi
    else
        message_red "[-$(git-behind)/+$(git-ahead)] ${name}"
    fi

    cd ..
done

# build packages
for (( i=0 ; i < ${#PKGS[*]} ; i++ )); do
    name="${PKGS[i]}"

    cd "${name}"

    pkgver=$(sed -n "/^pkgver=/ { s/pkgver=['\"]\\?\([^'\"]*\).\\?/\\1/ ; p }" "PKGBUILD") ; [ -n "${pkgver}" ]
    pkgrel=$(sed -n "/^pkgrel=/ { s/pkgrel=['\"]\\?\([^'\"]*\).\\?/\\1/ ; p }" "PKGBUILD") ; [ -n "${pkgrel}" ]

    if [ -f ${REPO}/${name}-${pkgver}-${pkgrel}-*.pkg.tar.xz ]; then
        message_green "[skip] ${name}-${pkgver}-${pkgrel}"
    else
        message_yellow "[build] ${name}-${pkgver}-${pkgrel}"
        : makepkg --force --syncdeps --rmdeps --noconfirm --ignorearch
        : mv ${name}-${pkgver}-${pkgrel}*.pkg.tar.xz "${REPO}"
        : repo-add --new "${REPO}/${NAME}.db.tar.gz" ${REPO}/${name}-${pkgver}-${pkgrel}-*.pkg.tar.xz
        pacman --sync --refresh
    fi

    : git clean -dxf
    cd ..
done

# list contents of repo
pacman --sync --list --color=always ${NAME}
